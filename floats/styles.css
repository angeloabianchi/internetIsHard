* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* Float property gives us control over the horizontal position of an element.
By "floating" the sidebar to the left, we're telling the browser to align in to
the left side of the page.
This only applies to block boxes. Inline boxes are aligned with the 'text-align'
property. */

/* Clearing Floats - is when we tell a block to ignore any floats that appear
before it. Instead of flowing around the floated box, a cleared elemet always
appears after any floats. Its like forcing a box back into the default vertical
flow of the page. */

/* Hiding Overflow - Clearing floats only fixes the height issue when there's an
element inside the container element that we can add a clear property to. Now
that our footer is outside .page, we need a new way to make floated elements
contribute to the height of the container. Adding Overflow:hidden declaration
to a container div, we're telling it to recognize the height of any floated
elements it contains.
When you have an extra unfloated HTML element at the bottom of a container div,
use the clear solution. Otherwise, add an overflow: hidden declaration to the
container element.*/

.page {
  width: 900px;
  margin: 0 auto;
}

.container {
  overflow: hidden;
  background-color: #EAEDF0;
  /* The important part here is the behavior of overflow: hidden. Without it,
  we wouldn’t be able to see the .page container’s background because it would
  have zero height. */
}

.menu {
  height: 100px;
  background-color: #B2D6FF;
}

.sidebar {
  float: left;
  width: 200px;
  height: 300px;
  background-color: #F09A9D;
}

.content {
  float: left;
  width: 650px;
  height: 500px;
  background-color: #F5CF8E;
  padding: 20px;
}

.footer {
  clear: both;    /* clearing floats */
  background-color: #D6E9FE;
  overflow: hidden;   /* moving the footer outside of the .page container broke
                      our clear fix. */
}

.footer-item {
  float: left;
  width: 31%;
  margin: 20px 1.15%;
  height: 160px;
  background-color: #B2D6FF;
  /* Percentages in CSS are relative to the width of the parent element. */
}

.article-image {
  float: left;
  width: 300px;
  height: 200px;
  margin-right: 20px;
  margin-bottom: 20px;
}

p {
  margin-bottom: 20px;
}

.avatar {
  float: left;
  width: 60px;
  height: 60px;
  margin: 25px;
  border-radius: 40px;
  background-color: #D6E9FE;
}

.username {
  margin-top: 30px;
}

.comment {
  margin: 10px;
  overflow: hidden;  /* This is important */
  font-size: 12px;
}

/* This chapter, we learned how to float divs to the left and right, how to deal
with content after a float, and how to combine floats with the auto-margin centering
technique. There were tools to create sidebars, grids, an magazine-style layouts. */
