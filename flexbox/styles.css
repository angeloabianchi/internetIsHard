* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}


/* Flexbox uses two types of boxes that we’ve never seen before: “flex containers”
and “flex items”. The job of a flex container is to group a bunch of flex items
together and define how they’re positioned. */
/* Every HTML element that’s a direct child of a flex container is an “item”. Flex
items can be manipulated individually, but for the most part, it’s up to the
container to determine their layout. The main purpose of flex items are to let
their container know how many things it needs to position.*/

.menu-container {
  color: #fff;
  background-color: #5995DA;  /* Blue */
  padding: 20px 0;


  /* ALIGNING A FLEX ITEM */
  display: flex;  /* <-- Flexbox */
  justify-content: center; /* <-- define the horizontal alignment of its items. */
  /* This has the same effect as adding a margin: 0 auto declaration to the .menu
  element. But, notice how we did this by adding a property to the parent element
  (the flex container) instead of directly to the element we wanted to center
  (the flex item). */
}

.menu {
  width: 900px;

  /* DISTRIBUTING MULTIPLE FLEX ITEMS */
  display: flex;                   /* This turns our .menu into a nested flex */
  justify-content: space-between;  /* container, and the space-around value spreads
                                      its items out across its entire width. */
}


/* GROUPING FLEX ITEMS */
/* Flex containers only know how to position elements that are one level deep
(their child elements). They don’t care one bit about what’s inside their flex items. */

.links {
  display: flex;
  justify-content: flex-end;
}

.login {
  margin-left: 20px;
}


/* CROSS-AXIS (VERTICAL ALIGNMENT) */
/* flex containers can also define the vertical alignment of their items.
justify-content (horizontal)
align-items (vertical) */

.header-container {
  color: #5995DA;
  background-color: #D6E9FE;
  display: flex;
  justify-content: center;
}

.header {
  width: 900px;
  height: 300px;
  display: flex;
  justify-content: space-between;
  /* Vertical alignment is defined by adding an align-items property to a flex container. */
  align-items: center;
  /* The available options for align-items is similar to justify-content:
  1. center
  2. flex-start (top)
  3. flex-end (bottom)
  4. stretch (The box for each item extends the full height of the flex container)
  5. baseline */
}


/* WRAPPING FLEX ITEMS */
/* Flexbox not only can it render items as a grid, it can ghange theis alignment,
direction, order, and size, too. To create a grid, we need the flex-wrap property */

.photo-grid-container {
  display: flex;
  justify-content: center;
}

.photo-grid {
  width: 900px;
  display: flex;
  justify-content: center;
  flex-wrap: wrap;
  flex-direction: row; /* FLEX CONTAINER DIRECTION */
  align-items: center;  /* To horizontally center our column, we need to define
                           an align-items property */
}

.photo-grid-item {
  border: 1px solid #fff;
  width: 300px;
  height: 300px;
}


/*FLEX CONTAINER DIRECTION */
/* “Direction” refers to whether a container renders its items horizontally or
vertically. One of the most amazing things about flexbox is its ability to
transform rows into columns using flex-direction.
The flex-direction property also offers you control over the order in which items
appear via the row-reverse and column-reverse properties.*/


/* ALIGNMENT CONSIDERATIONS */
/* When you rotate the direction of a container, you also rotate the direction
of the justify-content property. It now refers to the container’s vertical
alignment—not its horizontal alignment. */


/* FLEX ITEM ORDER */
/* Adding an order property to a flex item defines its order in the container
without affecting surrounding items. Its default value is 0, and increasing or
decreasing it from there moves the item to the right or left, respectively.*/

.first-item {
  order: 1;
}

.last-item {
  order: -1;
}


/* FLEX ITEM ALIGNMENT */
/* You can align elements in other ways using the same values as the align-items
property, listed below:
1. center
2. flex-start (top)
3. flex-end (bottom)
4. stretch
5. baseline */

.social,
.subscribe {
  align-self: flex-end;
  margin-bottom: 20px;
}


/*FLEXIBLE ITEMS */
/* The flex property defines the width of individual items in a flex container. It
allows them to have flexible widths.
An item with a flex value of 2 will grow twice as fast as items with the default
value of 1. */

.footer {
  display: flex;
  justify-content: space-between;
}

.footer-item {
  border: 1px solid #fff;
  background-color: #D6E9FE;
  height: 200px;
  flex: 1; /* <-- Flexible item default value */
}

.footer-three {
  flex: 2; /* <-- twice as fast */
}


/* STATIC ITEM WIDTHS */
/* We can even mix-and-match flexible boxes with fixed-width ones. flex: initial
 falls back to the item’s explicit width property. This lets us combine static
 and flexible boxes in complex ways. */

.footer-one,
.footer-three {
  background-color: #5995DA;
  flex: initial;
  width: 300px;
}


/* SUMMARY */
/*
    Use display: flex; to create a flex container.
    Use justify-content to define the horizontal alignment of items.
    Use align-items to define the vertical alignment of items.
    Use flex-direction if you need columns instead of rows.
    Use the row-reverse or column-reverse values to flip item order.
    Use order to customize the order of individual elements.
    Use align-self to vertically align individual items.
    Use flex to create flexible boxes that can stretch and shrink.
                                                                      */
